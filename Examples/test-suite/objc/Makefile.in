#######################################################################
# Makefile for Objective-C test-suite
#######################################################################

LANGUAGE     = objc
OBJC         = objc
SCRIPTSUFFIX = _runme.m
srcdir       = @srcdir@
top_srcdir   = @top_srcdir@
top_builddir = @top_builddir@

C_TEST_CASES = 

CPP_TEST_CASES =

include $(srcdir)/../common.mk

# Overridden variables here
INTERFACEDIR = $(srcdir)/../

# Rules for the different types of tests
%.cpptest: $(SWIG)
	$(setup)
	cd $*; \
	../$(strip $(SWIG)) -objc -c++ $(SWIGOPT) ../$(INTERFACEDIR)/$*.i; \
	$(MAKE) -f ../ObjC.mk TARGET=$* OBJC_MAKEFILES=@OBJC_MAKEFILES_PATH@; \
	if [ -f $(srcdir)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then \
		LD_LIBRARY_PATH=obj/ $(RUNTOOL) $*/obj/$*; \
	fi;

%.ctest: $(SWIG)
	$(setup)
	cd $*; \
	../$(strip $(SWIG)) -objc $(SWIGOPT) ../$(INTERFACEDIR)/$($*).i; \
	$(MAKE) -f ../ObjC.mk TARGET=$* OBJC_MAKEFILES=@OBJC_MAKEFILES_PATH@; \
	if [ -f $(srcdir)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then \
		LD_LIBRARY_PATH=obj/ $(RUNTOOL) $*/obj/$*; \
	fi;

%.multicpptest: $(SWIG) $(top_srcdir)/$(EXAMPLES)/$(TEST_SUITE)/$*.list
	$(setup)
	for f in `cat $(top_srcdir)/$(EXAMPLES)/$(TEST_SUITE)/$*.list` ; do \
		if [ ! -d $*/$f ]; then \
			@mkdir $f; \
		fi;
		cd $*/$f; \
		../../$(strip $(SWIG)) -objc -c++ $(SWIGOPT) ../../$(INTERFACEDIR)/$($*).i\
		$(MAKE) -f ../../ObjC.mk TARGET=$* OBJC_MAKEFILES=@OBJC_MAKEFILES_PATH@ MAKEFILE_NAME=../../ObjC.mk; \
		if [ -f $(srcdir)/$(SCRIPTPREFIX)$f$(SCRIPTSUFFIX) ]; then \
			LD_LIBRARY_PATH=obj/ $(RUNTOOL) $*/$f/obj/$*; \
		fi
	done

# Makes a directory for the testcase if it does not exist
setup = \
	if [ -f $(srcdir)/$(SCRIPTPREFIX)$*$(SCRIPTSUFFIX) ]; then	  \
	  echo "$(ACTION)ing testcase $* (with run test) under $(LANGUAGE)" ; \
	else								  \
	  echo "$(ACTION)ing testcase $* under $(LANGUAGE)" ;		  \
	fi;								  \
	if [ ! -d $* ]; then						  \
		mkdir $*;						  \
	fi;

# Clean: remove testcase directories
%.clean:
	@if [ -d $* ]; then \
		rm -rf $*; \
	fi;

clean:
	@rm -f *.o hs_err*.log
